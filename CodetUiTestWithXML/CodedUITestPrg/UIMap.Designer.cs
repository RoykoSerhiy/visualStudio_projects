// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 11.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestPrg
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod - Используйте "RecordedMethodParams" для передачи параметров в этот метод.
        /// </summary>
        public void RecordedMethod()
        {
            #region Variable Declarations
            WpfEdit uITbxFnameEdit = this.UIMainWindowWindow.UITbxFnameEdit;
            WpfEdit uITbxLNameEdit = this.UIMainWindowWindow.UITbxLNameEdit;
            WpfButton uISayHelloButton = this.UIMainWindowWindow.UISayHelloButton;
            #endregion

            // Последнее действие мыши не записано.

            // Тип "v" в "tbxFname" надпись
            uITbxFnameEdit.Text = this.RecordedMethodParams.UITbxFnameEditText;

            // Тип "s" в "tbxLName" надпись
            uITbxLNameEdit.Text = this.RecordedMethodParams.UITbxLNameEditText;

            // Щелкните "Say Hello" кнопка
            Mouse.Click(uISayHelloButton, new Point(109, 19));
        }
        
        /// <summary>
        /// AssertEqualMethod - Используйте "AssertEqualMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertEqualMethod()
        {
            #region Variable Declarations
            WpfEdit uITbxResEdit = this.UIMainWindowWindow.UITbxResEdit;
            #endregion

            // Убедитесь, что свойство AutomationId "tbxRes" надпись равняется "V S,Hello!"
            Assert.AreEqual(this.AssertEqualMethodExpectedValues.UITbxResEditAutomationId, uITbxResEdit.AutomationId);
        }
        
        #region Properties
        public virtual RecordedMethodParams RecordedMethodParams
        {
            get
            {
                if ((this.mRecordedMethodParams == null))
                {
                    this.mRecordedMethodParams = new RecordedMethodParams();
                }
                return this.mRecordedMethodParams;
            }
        }
        
        public virtual AssertEqualMethodExpectedValues AssertEqualMethodExpectedValues
        {
            get
            {
                if ((this.mAssertEqualMethodExpectedValues == null))
                {
                    this.mAssertEqualMethodExpectedValues = new AssertEqualMethodExpectedValues();
                }
                return this.mAssertEqualMethodExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethodParams mRecordedMethodParams;
        
        private AssertEqualMethodExpectedValues mAssertEqualMethodExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "RecordedMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class RecordedMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Тип "v" в "tbxFname" надпись
        /// </summary>
        public string UITbxFnameEditText = "V";
        
        /// <summary>
        /// Тип "s" в "tbxLName" надпись
        /// </summary>
        public string UITbxLNameEditText = "S";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertEqualMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class AssertEqualMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство AutomationId "tbxRes" надпись равняется "V S,Hello!"
        /// </summary>
        public string UITbxResEditAutomationId = "V S,Hello!";
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Условия поиска
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITbxFnameEdit
        {
            get
            {
                if ((this.mUITbxFnameEdit == null))
                {
                    this.mUITbxFnameEdit = new WpfEdit(this);
                    #region Условия поиска
                    this.mUITbxFnameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbxFname";
                    this.mUITbxFnameEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITbxFnameEdit;
            }
        }
        
        public WpfEdit UITbxLNameEdit
        {
            get
            {
                if ((this.mUITbxLNameEdit == null))
                {
                    this.mUITbxLNameEdit = new WpfEdit(this);
                    #region Условия поиска
                    this.mUITbxLNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbxLName";
                    this.mUITbxLNameEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITbxLNameEdit;
            }
        }
        
        public WpfButton UISayHelloButton
        {
            get
            {
                if ((this.mUISayHelloButton == null))
                {
                    this.mUISayHelloButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUISayHelloButton.SearchProperties[WpfButton.PropertyNames.Name] = "Say Hello";
                    this.mUISayHelloButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISayHelloButton;
            }
        }
        
        public WpfEdit UITbxResEdit
        {
            get
            {
                if ((this.mUITbxResEdit == null))
                {
                    this.mUITbxResEdit = new WpfEdit(this);
                    #region Условия поиска
                    this.mUITbxResEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbxRes";
                    this.mUITbxResEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITbxResEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITbxFnameEdit;
        
        private WpfEdit mUITbxLNameEdit;
        
        private WpfButton mUISayHelloButton;
        
        private WpfEdit mUITbxResEdit;
        #endregion
    }
}
